{"ast":null,"code":"var _jsxFileName = \"/Users/kevingleeson/Development/quiz-app/starter/src/App.js\";\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport Summary from './components/Summary';\nimport { questions } from './quizzes/questions.js';\nexport default function App() {\n  // here we will, in our challenge, take all of the incorrect and \n  // correct answers and combine them into a new array of questions.\n  // to be randomly mapped in the quiz component \n  const [allAnswers, setAllAnswers] = useState([]); // using this empty array, we'll combine both our correct + incorrect answers\n  // we'll compare what was clicked to correctOptions.answerText \n\n  const [currentQuestion, setCurrentQuestion] = useState(0); // sets state to false so we can flip it with a click\n\n  const [showSummary, setShowSummary] = useState(false);\n  const [score, setScore] = useState(0);\n\n  const shuffle = array => {\n    let currentIndex = array.length,\n        temporaryValue,\n        randomIndex; // While there remain elements to shuffle...\n\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1; // And swap it with the current element.\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }; // useMemo is useful when you want to create a reactive variable that changes based on \n  // the change of another variable. The dependecy here is what React is listening for \n  // that will trigger our change.  \n\n\n  const answers = useMemo(() => {\n    const returnArr = [...questions[currentQuestion].incorrectOptions, questions[currentQuestion].correctOption];\n    return shuffle(returnArr);\n  }, [currentQuestion]);\n\n  const handleAnswerButtonClick = answerText => {\n    if (answerText === questions[currentQuestion].correctOption) {\n      setScore(score + 1);\n    } // This logic for moving to the next question will \n    // likely need to be in a separate function in test. \n\n\n    const nextQuestion = currentQuestion + 1;\n    setCurrentQuestion(nextQuestion); // this will break without this\n\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion); // call answer randomizer? \n    } else {\n      setShowSummary(true);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 3\n    }\n  }, showSummary ? /*#__PURE__*/React.createElement(Summary, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 8\n    }\n  }, \"Question \", currentQuestion + 1), \"/\", questions.length), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, questions[currentQuestion].questionText), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answer-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, answers.map(answerOption =>\n  /*#__PURE__*/\n  // when a question is answered you go to the next question /w handleAnswerButtonClicked\n  // This is different from my new assingment. \n  React.createElement(\"button\", {\n    onClick: () => handleAnswerButtonClick(answerOption),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 8\n    }\n  }, answerOption))))));\n} // TO DO \n// Button that resets particular quiz.","map":{"version":3,"sources":["/Users/kevingleeson/Development/quiz-app/starter/src/App.js"],"names":["React","useState","useEffect","useCallback","useMemo","Summary","questions","App","allAnswers","setAllAnswers","currentQuestion","setCurrentQuestion","showSummary","setShowSummary","score","setScore","shuffle","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","answers","returnArr","incorrectOptions","correctOption","handleAnswerButtonClick","answerText","nextQuestion","questionText","map","answerOption"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react';\n\nimport Summary from './components/Summary'\nimport { questions } from './quizzes/questions.js'\n\n\nexport default function App() {\n\t// here we will, in our challenge, take all of the incorrect and \n\t// correct answers and combine them into a new array of questions.\n\t// to be randomly mapped in the quiz component \n\n\tconst [allAnswers, setAllAnswers] = useState([])\n\t// using this empty array, we'll combine both our correct + incorrect answers\n\t// we'll compare what was clicked to correctOptions.answerText \n\n\tconst [currentQuestion, setCurrentQuestion] = useState(0);\n\t// sets state to false so we can flip it with a click\n\tconst [showSummary, setShowSummary] = useState(false);\n\tconst [score, setScore] = useState(0);\n\n\tconst shuffle = (array) => {\n\t\tlet currentIndex = array.length, temporaryValue, randomIndex;\n\t  \n\t\t// While there remain elements to shuffle...\n\t\twhile (0 !== currentIndex) {\n\t  \n\t\t  // Pick a remaining element...\n\t\t  randomIndex = Math.floor(Math.random() * currentIndex);\n\t\t  currentIndex -= 1;\n\t  \n\t\t  // And swap it with the current element.\n\t\t  temporaryValue = array[currentIndex];\n\t\t  array[currentIndex] = array[randomIndex];\n\t\t  array[randomIndex] = temporaryValue;\n\t\t}\n\t  \n\t\treturn array;\n\t  }\n\n\t// useMemo is useful when you want to create a reactive variable that changes based on \n\t// the change of another variable. The dependecy here is what React is listening for \n\t// that will trigger our change.  \n\n\tconst answers = useMemo(() => {\n\t\tconst returnArr = [...questions[currentQuestion].incorrectOptions, questions[currentQuestion].correctOption]\n\n\t\treturn shuffle(returnArr)\n\n\t}, [currentQuestion])\n\t\n\n\tconst handleAnswerButtonClick = (answerText) => {\n\t\tif( answerText === questions[currentQuestion].correctOption){\n\t\t\tsetScore(score + 1)\n\t\t}\n\t\t// This logic for moving to the next question will \n\t\t// likely need to be in a separate function in test. \n\t\tconst nextQuestion = currentQuestion + 1\n\t\tsetCurrentQuestion(nextQuestion)\n\t\t// this will break without this\n\t\tif(nextQuestion < questions.length){\n\t\t\tsetCurrentQuestion(nextQuestion)\n\t\t\t// call answer randomizer? \n\t\t}else{\n\t\t\tsetShowSummary(true)\n\t\t}\n\t}\n\n\treturn (\n\t\t<div className='app'>\n\t\t\t{/* HINT: replace \"false\" with logic to display the \n      score when the user has answered all the questions */}\n\n\t  {/* this terary below is going to be what renders our score component */}\n\t\t\t{showSummary ? (\n\t\t\t\t<Summary />\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t<div className='question-section'>\n\t\t\t\t\t\t<div className='question-count'>\n\t\t\t\t\t\t\t<span>Question {currentQuestion + 1}</span>/{questions.length}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t{/* in challenge will have to import the questions array.\n\t\t\t\t\t\tAlso, the structure of the answers is different, too. \n\t\t\t\t\t\t\n\t\t\t\t\t\tcurrentQuestion comes from state and makes our questions/answers\n\t\t\t\t\t\tmore dynamic. */}\n\t\t\t\t\t\t<div className='question-text'>{questions[currentQuestion].questionText}</div>\n\t\t\t\t\t\t<div className='answer-section'>\n\t\t\t\t\t\t{/* mapping answers to the answer-section by answerText */}\n\t\t\t\t\t\t{answers.map((answerOption) => \n\t\t\t\t\t\t// when a question is answered you go to the next question /w handleAnswerButtonClicked\n\t\t\t\t\t\t// This is different from my new assingment. \n\t\t\t\t\t\t\t<button onClick={() => handleAnswerButtonClick(answerOption)}>{answerOption}</button>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{/* RETURN CODE HERE */}\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\n\n\n\n// TO DO \n// Button that resets particular quiz.\n"]},"metadata":{},"sourceType":"module"}