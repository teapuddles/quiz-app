{"ast":null,"code":"var _jsxFileName = \"/Users/kevingleeson/Development/quiz-app/starter/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Summary from './components/Summary';\nimport { questions } from './quizzes/questions.js';\nexport default function App() {\n  // here we will, in our challenge, take all of the incorrect and \n  // correct answers and combine them into a new array of questions.\n  // to be randomly mapped in the quiz component \n  const [allAnswers, setAllAnswers] = useState([]); // using this empty array, we'll combine both our correct + incorrect answers\n  // we'll compare what was clicked to correctOptions.answerText \n\n  const [currentQuestion, setCurrentQuestion] = useState(0); // sets state to false so we can flip it with a click\n\n  const [showSummary, setShowSummary] = useState(false);\n  const [score, setScore] = useState(0);\n  useEffect(() => {\n    combineAllAnswers();\n    return console.log(questions[currentQuestion].correctOptions[0], questions[currentQuestion].incorrectOptions, allAnswers);\n  }, [currentQuestion]);\n\n  const combineAllAnswers = () => {\n    const correct = questions[currentQuestion].correctOptions;\n    const incorrect = questions[currentQuestion.incorrectOptions];\n    setAllAnswers(allAnswers.concat(correct, incorrect));\n    console.log(allAnswers);\n  };\n\n  const handleAnswerButtonClick = isCorrect => {\n    if (isCorrect === true) {\n      setScore(score + 1);\n    } // This logic for moving to the next question will \n    // likely need to be in a separate function in test. \n\n\n    const nextQuestion = currentQuestion + 1;\n    setCurrentQuestion(nextQuestion); // this will break without this\n\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion); // call answer randomizer? \n    } else {\n      setShowSummary(true);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 3\n    }\n  }, showSummary ? /*#__PURE__*/React.createElement(Summary, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 8\n    }\n  }, \"Question \", currentQuestion + 1), \"/\", questions.length), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, questions[currentQuestion].questionText))));\n} // {/* <div className='answer-section'>\n// \t\t\t\t\t\t{/* mapping answers to the answer-section by answerText */}\n// \t\t\t\t\t\t{questions[currentQuestion].answerOptions.map((answerOption) => \n// \t\t\t\t\t\t// when a question is answered you go to the next question /w handleAnswerButtonClicked\n// \t\t\t\t\t\t// This is different from my new assingment. \n// \t\t\t\t\t\t\t<button onClick={() => handleAnswerButtonClick(answerOption.isCorrect)}>{answerOption.answerText}</button>\n// \t\t\t\t\t\t\t)}\n// \t\t\t\t\t</div> */}\n// TO DO \n// Button that resets particular quiz.","map":{"version":3,"sources":["/Users/kevingleeson/Development/quiz-app/starter/src/App.js"],"names":["React","useState","useEffect","Summary","questions","App","allAnswers","setAllAnswers","currentQuestion","setCurrentQuestion","showSummary","setShowSummary","score","setScore","combineAllAnswers","console","log","correctOptions","incorrectOptions","correct","incorrect","concat","handleAnswerButtonClick","isCorrect","nextQuestion","length","questionText"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAGA,OAAOC,OAAP,MAAoB,sBAApB;AACA,SAASC,SAAT,QAA0B,wBAA1B;AAGA,eAAe,SAASC,GAAT,GAAe;AAC7B;AACA;AACA;AAEA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,EAAD,CAA5C,CAL6B,CAM7B;AACA;;AAEA,QAAM,CAACO,eAAD,EAAkBC,kBAAlB,IAAwCR,QAAQ,CAAC,CAAD,CAAtD,CAT6B,CAU7B;;AACA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,CAAD,CAAlC;AAGAC,EAAAA,SAAS,CAAC,MAAM;AACfY,IAAAA,iBAAiB;AACjB,WAAOC,OAAO,CAACC,GAAR,CAAYZ,SAAS,CAACI,eAAD,CAAT,CAA2BS,cAA3B,CAA0C,CAA1C,CAAZ,EAA0Db,SAAS,CAACI,eAAD,CAAT,CAA2BU,gBAArF,EAAuGZ,UAAvG,CAAP;AACA,GAHQ,EAGP,CAACE,eAAD,CAHO,CAAT;;AAMA,QAAMM,iBAAiB,GAAG,MAAM;AAC/B,UAAMK,OAAO,GAAGf,SAAS,CAACI,eAAD,CAAT,CAA2BS,cAA3C;AACA,UAAMG,SAAS,GAAGhB,SAAS,CAACI,eAAe,CAACU,gBAAjB,CAA3B;AACAX,IAAAA,aAAa,CAACD,UAAU,CAACe,MAAX,CAAkBF,OAAlB,EAA2BC,SAA3B,CAAD,CAAb;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYV,UAAZ;AACA,GALD;;AAQA,QAAMgB,uBAAuB,GAAIC,SAAD,IAAe;AAC9C,QAAGA,SAAS,KAAK,IAAjB,EAAsB;AACrBV,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACA,KAH6C,CAI9C;AACA;;;AACA,UAAMY,YAAY,GAAGhB,eAAe,GAAG,CAAvC;AACAC,IAAAA,kBAAkB,CAACe,YAAD,CAAlB,CAP8C,CAQ9C;;AACA,QAAGA,YAAY,GAAGpB,SAAS,CAACqB,MAA5B,EAAmC;AAClChB,MAAAA,kBAAkB,CAACe,YAAD,CAAlB,CADkC,CAElC;AACA,KAHD,MAGK;AACJb,MAAAA,cAAc,CAAC,IAAD,CAAd;AACA;AACD,GAfD;;AAiBA,sBACC;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKED,WAAW,gBACX,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADW,gBAGX,uDACC;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAgBF,eAAe,GAAG,CAAlC,CADD,OAC8CJ,SAAS,CAACqB,MADxD,CADD,eASC;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgCrB,SAAS,CAACI,eAAD,CAAT,CAA2BkB,YAA3D,CATD,CADD,CARF,CADD;AA0BA,C,CAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n\nimport Summary from './components/Summary'\nimport { questions } from './quizzes/questions.js'\n\n\nexport default function App() {\n\t// here we will, in our challenge, take all of the incorrect and \n\t// correct answers and combine them into a new array of questions.\n\t// to be randomly mapped in the quiz component \n\n\tconst [allAnswers, setAllAnswers] = useState([])\n\t// using this empty array, we'll combine both our correct + incorrect answers\n\t// we'll compare what was clicked to correctOptions.answerText \n\n\tconst [currentQuestion, setCurrentQuestion] = useState(0);\n\t// sets state to false so we can flip it with a click\n\tconst [showSummary, setShowSummary] = useState(false);\n\tconst [score, setScore] = useState(0);\n\n\n\tuseEffect(() => {\n\t\tcombineAllAnswers()\n\t\treturn console.log(questions[currentQuestion].correctOptions[0], questions[currentQuestion].incorrectOptions, allAnswers)\n\t},[currentQuestion])\n\n\n\tconst combineAllAnswers = () => {\n\t\tconst correct = questions[currentQuestion].correctOptions\n\t\tconst incorrect = questions[currentQuestion.incorrectOptions]\n\t\tsetAllAnswers(allAnswers.concat(correct, incorrect))\n\t\tconsole.log(allAnswers)\n\t}\n\n\n\tconst handleAnswerButtonClick = (isCorrect) => {\n\t\tif(isCorrect === true){\n\t\t\tsetScore(score + 1)\n\t\t}\n\t\t// This logic for moving to the next question will \n\t\t// likely need to be in a separate function in test. \n\t\tconst nextQuestion = currentQuestion + 1\n\t\tsetCurrentQuestion(nextQuestion)\n\t\t// this will break without this\n\t\tif(nextQuestion < questions.length){\n\t\t\tsetCurrentQuestion(nextQuestion)\n\t\t\t// call answer randomizer? \n\t\t}else{\n\t\t\tsetShowSummary(true)\n\t\t}\n\t}\n\n\treturn (\n\t\t<div className='app'>\n\t\t\t{/* HINT: replace \"false\" with logic to display the \n      score when the user has answered all the questions */}\n\n\t  {/* this terary below is going to be what renders our score component */}\n\t\t\t{showSummary ? (\n\t\t\t\t<Summary />\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t<div className='question-section'>\n\t\t\t\t\t\t<div className='question-count'>\n\t\t\t\t\t\t\t<span>Question {currentQuestion + 1}</span>/{questions.length}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{/* in challenge will have to import the questions array.\n\t\t\t\t\t\tAlso, the structure of the answers is different, too. \n\t\t\t\t\t\t\n\t\t\t\t\t\tcurrentQuestion comes from state and makes our questions/answers\n\t\t\t\t\t\tmore dynamic. */}\n\t\t\t\t\t\t<div className='question-text'>{questions[currentQuestion].questionText}</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{/* RETURN CODE HERE */}\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\n\n// {/* <div className='answer-section'>\n// \t\t\t\t\t\t{/* mapping answers to the answer-section by answerText */}\n// \t\t\t\t\t\t{questions[currentQuestion].answerOptions.map((answerOption) => \n// \t\t\t\t\t\t// when a question is answered you go to the next question /w handleAnswerButtonClicked\n// \t\t\t\t\t\t// This is different from my new assingment. \n// \t\t\t\t\t\t\t<button onClick={() => handleAnswerButtonClick(answerOption.isCorrect)}>{answerOption.answerText}</button>\n// \t\t\t\t\t\t\t)}\n// \t\t\t\t\t</div> */}\n\n// TO DO \n// Button that resets particular quiz.\n"]},"metadata":{},"sourceType":"module"}