{"ast":null,"code":"var _jsxFileName = \"/Users/kevingleeson/Development/quiz-app/starter/src/App.js\";\nimport React, { useState } from 'react';\nimport { questions } from './quizzes/questions.js';\nexport default function App() {\n  // here we will, in our challenge, take all of the incorrect and \n  // correct answers and combine them into a new array of questions.\n  // to be randomly mapped in the quiz component \n  const [currentQuestion, setCurrentQuestion] = useState(0); // sets state to false so we can flip it with a click\n\n  const [showSummary, setShowSummary] = useState(false);\n  const [score, setScore] = useState(0);\n\n  const handleAnswerButtonClick = isCorrect => {\n    if (isCorrect === true) {\n      setScore(score + 1);\n    } // This logic for moving to the next question will \n    // likely need to be in a separate function in test. \n\n\n    const nextQuestion = currentQuestion + 1;\n    setCurrentQuestion(nextQuestion); // this will break without this\n\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowSummary(true);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 3\n    }\n  }, \"/* \", showSummary ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"score-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, \"You scored \", score, \" out of \", questions.length) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 8\n    }\n  }, \"Question \", currentQuestion + 1), \"/\", questions.length), \" */}\", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, questions[currentQuestion].questionText)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answer-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 6\n    }\n  }, questions[currentQuestion].answerOptions.map(answerOption =>\n  /*#__PURE__*/\n  // when a question is answered you go to the next question /w handleAnswerButtonClicked\n  // This is different from my new assingment. \n  React.createElement(\"button\", {\n    onClick: () => handleAnswerButtonClick(answerOption.isCorrect),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 8\n    }\n  }, answerOption.answerText)))));\n} // TO DO \n// Button that resets particular quiz.","map":{"version":3,"sources":["/Users/kevingleeson/Development/quiz-app/starter/src/App.js"],"names":["React","useState","questions","App","currentQuestion","setCurrentQuestion","showSummary","setShowSummary","score","setScore","handleAnswerButtonClick","isCorrect","nextQuestion","length","questionText","answerOptions","map","answerOption","answerText"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,SAAT,QAA0B,wBAA1B;AAGA,eAAe,SAASC,GAAT,GAAe;AAC7B;AACA;AACA;AAEA,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCJ,QAAQ,CAAC,CAAD,CAAtD,CAL6B,CAM7B;;AACA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,CAAD,CAAlC;;AAGA,QAAMS,uBAAuB,GAAIC,SAAD,IAAe;AAC9C,QAAGA,SAAS,KAAK,IAAjB,EAAsB;AACrBF,MAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACA,KAH6C,CAK9C;AACA;;;AACA,UAAMI,YAAY,GAAGR,eAAe,GAAG,CAAvC;AACAC,IAAAA,kBAAkB,CAACO,YAAD,CAAlB,CAR8C,CAS9C;;AACA,QAAGA,YAAY,GAAGV,SAAS,CAACW,MAA5B,EAAmC;AAClCR,MAAAA,kBAAkB,CAACO,YAAD,CAAlB;AACA,KAFD,MAEK;AACJL,MAAAA,cAAc,CAAC,IAAD,CAAd;AACA;AACD,GAfD;;AAiBA,sBACC;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAMKD,WAAW,gBACd;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA2CE,KAA3C,cAA0DN,SAAS,CAACW,MAApE,CADc,gBAGd,uDACC;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAgBT,eAAe,GAAG,CAAlC,CADD,OAC8CF,SAAS,CAACW,MADxD,CADD,uBASC;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgCX,SAAS,CAACE,eAAD,CAAT,CAA2BU,YAA3D,CATD,CADD,eAYC;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEEZ,SAAS,CAACE,eAAD,CAAT,CAA2BW,aAA3B,CAAyCC,GAAzC,CAA8CC,YAAD;AAAA;AAC9C;AACA;AACC;AAAQ,IAAA,OAAO,EAAE,MAAMP,uBAAuB,CAACO,YAAY,CAACN,SAAd,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyEM,YAAY,CAACC,UAAtF,CAHA,CAFF,CAZD,CATF,CADD;AAkCA,C,CAGD;AACA","sourcesContent":["import React, { useState } from 'react';\n\nimport { questions } from './quizzes/questions.js'\n\n\nexport default function App() {\n\t// here we will, in our challenge, take all of the incorrect and \n\t// correct answers and combine them into a new array of questions.\n\t// to be randomly mapped in the quiz component \n\n\tconst [currentQuestion, setCurrentQuestion] = useState(0);\n\t// sets state to false so we can flip it with a click\n\tconst [showSummary, setShowSummary] = useState(false);\n\tconst [score, setScore] = useState(0);\n\n\n\tconst handleAnswerButtonClick = (isCorrect) => {\n\t\tif(isCorrect === true){\n\t\t\tsetScore(score + 1)\n\t\t}\n\n\t\t// This logic for moving to the next question will \n\t\t// likely need to be in a separate function in test. \n\t\tconst nextQuestion = currentQuestion + 1\n\t\tsetCurrentQuestion(nextQuestion)\n\t\t// this will break without this\n\t\tif(nextQuestion < questions.length){\n\t\t\tsetCurrentQuestion(nextQuestion)\n\t\t}else{\n\t\t\tsetShowSummary(true)\n\t\t}\n\t}\n\n\treturn (\n\t\t<div className='app'>\n\t\t\t{/* HINT: replace \"false\" with logic to display the \n      score when the user has answered all the questions */}\n\n\t  {/* this terary below is going to be what renders our score component */}\n\t\t\t\n\t\t\t/* {showSummary ? (\n\t\t\t\t<div className='score-section'>You scored {score} out of {questions.length}</div>\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t<div className='question-section'>\n\t\t\t\t\t\t<div className='question-count'>\n\t\t\t\t\t\t\t<span>Question {currentQuestion + 1}</span>/{questions.length}\n\t\t\t\t\t\t</div> */}\n\t\t\t\t\t\t{/* in challenge will have to import the questions array.\n\t\t\t\t\t\tAlso, the structure of the answers is different, too. \n\t\t\t\t\t\t\n\t\t\t\t\t\tcurrentQuestion comes from state and makes our questions/answers\n\t\t\t\t\t\tmore dynamic. */}\n\t\t\t\t\t\t<div className='question-text'>{questions[currentQuestion].questionText}</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='answer-section'>\n\t\t\t\t\t\t{/* mapping answers to the answer-section by answerText */}\n\t\t\t\t\t\t{questions[currentQuestion].answerOptions.map((answerOption) => \n\t\t\t\t\t\t// when a question is answered you go to the next question /w handleAnswerButtonClicked\n\t\t\t\t\t\t// This is different from my new assingment. \n\t\t\t\t\t\t\t<button onClick={() => handleAnswerButtonClick(answerOption.isCorrect)}>{answerOption.answerText}</button>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\n\n// TO DO \n// Button that resets particular quiz.\n"]},"metadata":{},"sourceType":"module"}